import react from 'react';
import axios from 'axios'; //axiosnpm

export default function Home(props){
	const [city, setCity] = useState('')
	const [weather, setWeather] = useState({})
	const apiKey = '72755bc467c1d53c659735f90fec6c06'

	function queryWeatherAPO(queryCity){
		axios.get(`https://api.openweathermap.org/data/2.5/weather?q={queryCity}&APPID=${apiKey}`)
		.then(function(response){
			console.log('response', response);
			return response;
		})
		.catch(function(error)) {
			console.log('error', error);
			return error;
		});
	}

	useEffect(() => {
		setCity('London');
		setWeather({});
		console.log('weather test', queryWeatherAPI('London'))
	}, []);

console.log('weather',weather);

return (
	<div>
		<h1>Weather in {city}</h1>
		<p>Humidity: ???<p>
	</div>

);

//-- http://coolurl.com/page-one?
paramone=asdasdas
paramtwo-sadsdddssds

export defauly function Home() {
	cont urlParams = props.location.search;

	return(
		<div>

		</div>
	)
}

useEffect(() =>{
	const urlParams = new URLSearchParams(props.location.search)
	const cityParam = urlParams.get('city') ? urlParams.get('city') : 'London';
	setCity(cityParam);

	const query = 'https://api.openweathermap.ord'
	axios.get(query).then(response => apiCallback(response));
}, []);

useEffect(() => {	
} [weather])

css

body {
	box-sizing
}


flexbox {
	display: flex;
	flex-direction: row;
	align-content: center;
	justify-content: flex-end;
	width: 100%;
	margin: 20px auto;
	max-width: 1000px;
}

.WeatherNav_Item {
	color: black
	font-size: 20px;
	margin: 0 20px;
	padding: 10px;
}

.WeatherNac_Item--active {
	background-color: yellow;
	color: red;
}

className={`WeatherNav_Item ${city === 'Seoul ? 'WeatherNav'_Item--active' : ''}`}

components
weathericon.js

import {fontAwsomeIcon} from '@fontawesome/react-fontawesome';
import {faCloudRain, faCloud, faSun, faWind} from 'asdasdasdasd'

export default function WeatherIcon({weatherType}) {
	console.log('weatherType', weatherType)
	let icon;
	switch(weatherType) {
		case: 'Rain'
			return ( 
				<FontAwesomeIcon 
					icon={faCloudRain}
				/>
			);
		case: 'Cloudy'
			return <FontAwesomeIcon icon={faCloud}/>
		case: 'Snow'
			return <FontAwesomeIcon icon={faCloudSnow}/>
		default:
			return <div></div>
	}


useEffect(() => {
	let getWeatherType = weather.weather ? weather.weather[0].main : '';
	let getCloudy = weather.clouds ? weather.clouds.all : 0;
	setWeatherType(getWeatherType)
	setCloudy(getCloudy)
}, [weather])

components
PageWrapper.js

import React from 'react';

export default function pageWrapper: ({cloudy, children}) {
	const wrapperOpcacity: Cloudy ? (cloudy * 0.01) : 0;

	return(
		<div style={{
			height:'100%',
			width: '100%',
			minHeuight: '100vh',
			minWidth: '100vw',
			backgroundColor: `rgba(000,${wrapperOpacitty})`
		}}>
			{children}
		</div>

	)

}

const redvalue: ((cloudy+1)/100)*255;

backgroundColor: `rgba({redvalue,bluevalue,greenvalue});

const query = `https://api.openweathermap.org/data/2.5/weather?q=${cityParam}&APPID=${apiKey}`
			axios.get(query).then(response => apiCallback(response));


				// <div>{pageWrapper({Cloudy,children})}</div>
				// import pageWrapper from '..//components/pagewrapper.js';


const [error,isError] = useState(false);
const [errorMessage, setErrorMessage] = useState('');
const [sucess, isSucess] = useState(True);

function apiCallback(response) {
	console.log('response', response);
	if(response,status !== 200) {
		isError(true);
		setErrorMessage(`${response.state}: ${'Error'}`);
	} else {
		isSucess(true);
	}
	setWeather(response,data)
}

return (

	<div>
	{error && <div className="errorMessage">{errorMessage}</div>}

)


Flexbox
CSS Grid
Floats

Margin
Padding

//ANimation
transition
keyframes

className={
	`city ${'cityName'}`
	`city ${city === London ? 'city_london'}`
}

.sucessMessage {
	background-color: rgba(179,255,191);
	border: 2px solig green;
	border-radius: 5px;
	display: block;
	padding: 20px 5px;
	position: relative;
	margin: 20px 0;
	text-align: center;
	top: 0;
	transition: background-color 500ms ease, top 200ms ease;
}

.sucessMessage:hover {
	background-color: rgba(179, 255, 191, 0.1);
	top: 5px;
}

git branch
git checkout -b readings/week-seven
git branch

git add.
git commit -m "sadsadasd"

git checkout --no-track -b week-eight origin/mast

const [tempType, setTempType] = useState('');

<div>
	<p>{tempType}</p>
	<div>
		<p onClick={()=> setTemptType('C')} 
		className={`TemperatureType ${tempType === 'C' ? 'TemperatureType__Active': ''}`}
		>Set to C</p>
	</div>
</div>

